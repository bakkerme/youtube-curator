// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Your GET endpoint
	// (GET /channels/)
	GetChannels(ctx echo.Context) error
	// Your GET endpoint
	// (GET /channels/{channelID})
	GetChannelByID(ctx echo.Context, channelID string) error
	// Your GET endpoint
	// (GET /channels/{channelID}/update)
	CheckChannelUpdates(ctx echo.Context, channelID string) error
	// Your GET endpoint
	// (GET /jobs)
	GetJobs(ctx echo.Context, params GetJobsParams) error
	// Get Job Websocket
	// (GET /jobs/socket/{jobID})
	GetJobsSocket(ctx echo.Context, jobID string) error
	// Your GET endpoint
	// (GET /jobs/{jobID})
	GetJobsByID(ctx echo.Context, jobID string) error
	// Delete Video
	// (DELETE /videos)
	DeleteVideos(ctx echo.Context) error
	// Get Video Data
	// (GET /videos)
	GetVideos(ctx echo.Context, params GetVideosParams) error
	// Download Video
	// (PUT /videos)
	DownloadVideos(ctx echo.Context) error

	// (DELETE /videos/{videoID})
	DeleteVideoByID(ctx echo.Context, videoID string, params DeleteVideoByIDParams) error
	// Get Video Data
	// (GET /videos/{videoID})
	GetVideoByID(ctx echo.Context, videoID string, params GetVideoByIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetChannels converts echo context to params.
func (w *ServerInterfaceWrapper) GetChannels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetChannels(ctx)
	return err
}

// GetChannelByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetChannelByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "channelID" -------------
	var channelID string

	err = runtime.BindStyledParameter("simple", false, "channelID", ctx.Param("channelID"), &channelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetChannelByID(ctx, channelID)
	return err
}

// CheckChannelUpdates converts echo context to params.
func (w *ServerInterfaceWrapper) CheckChannelUpdates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "channelID" -------------
	var channelID string

	err = runtime.BindStyledParameter("simple", false, "channelID", ctx.Param("channelID"), &channelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckChannelUpdates(ctx, channelID)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx, params)
	return err
}

// GetJobsSocket converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobsSocket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobID" -------------
	var jobID string

	err = runtime.BindStyledParameter("simple", false, "jobID", ctx.Param("jobID"), &jobID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobsSocket(ctx, jobID)
	return err
}

// GetJobsByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobsByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobID" -------------
	var jobID string

	err = runtime.BindStyledParameter("simple", false, "jobID", ctx.Param("jobID"), &jobID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobsByID(ctx, jobID)
	return err
}

// DeleteVideos converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVideos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVideos(ctx)
	return err
}

// GetVideos converts echo context to params.
func (w *ServerInterfaceWrapper) GetVideos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVideosParams
	// ------------- Optional query parameter "channelID" -------------

	err = runtime.BindQueryParameter("form", true, false, "channelID", ctx.QueryParams(), &params.ChannelID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVideos(ctx, params)
	return err
}

// DownloadVideos converts echo context to params.
func (w *ServerInterfaceWrapper) DownloadVideos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DownloadVideos(ctx)
	return err
}

// DeleteVideoByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVideoByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "videoID" -------------
	var videoID string

	err = runtime.BindStyledParameter("simple", false, "videoID", ctx.Param("videoID"), &videoID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter videoID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteVideoByIDParams
	// ------------- Optional query parameter "videoID" -------------

	err = runtime.BindQueryParameter("form", true, false, "videoID", ctx.QueryParams(), &params.VideoID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter videoID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteVideoByID(ctx, videoID, params)
	return err
}

// GetVideoByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetVideoByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "videoID" -------------
	var videoID string

	err = runtime.BindStyledParameter("simple", false, "videoID", ctx.Param("videoID"), &videoID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter videoID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVideoByIDParams
	// ------------- Required query parameter "videoID" -------------

	err = runtime.BindQueryParameter("form", true, true, "videoID", ctx.QueryParams(), &params.VideoID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter videoID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVideoByID(ctx, videoID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/channels/", wrapper.GetChannels)
	router.GET(baseURL+"/channels/:channelID", wrapper.GetChannelByID)
	router.GET(baseURL+"/channels/:channelID/update", wrapper.CheckChannelUpdates)
	router.GET(baseURL+"/jobs", wrapper.GetJobs)
	router.GET(baseURL+"/jobs/socket/:jobID", wrapper.GetJobsSocket)
	router.GET(baseURL+"/jobs/:jobID", wrapper.GetJobsByID)
	router.DELETE(baseURL+"/videos", wrapper.DeleteVideos)
	router.GET(baseURL+"/videos", wrapper.GetVideos)
	router.PUT(baseURL+"/videos", wrapper.DownloadVideos)
	router.DELETE(baseURL+"/videos/:videoID", wrapper.DeleteVideoByID)
	router.GET(baseURL+"/videos/:videoID", wrapper.GetVideoByID)

}
